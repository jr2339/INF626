sd_prop = sd_prior * 1.1
#-----------------------------------
#-----------------------------------
#Generate 30 observations from real distributation
n_sample = 30
y_test = rnorm(n_sample, mu_true, sd_fixed)
#-----------------------------------
#-----------------------------------
n_iter = 10000
chosen_theta = NULL
result = NULL
for(i in 1:n_iter){
# Initializing the old_theta
if(i == 1){
old_theta = rnorm(1, mu_prop, sd_prop)
}
# for each loop, it will generate a new theta
new_theta = rnorm(1, mu_prop, sd_prop)
#calculate the probability based on the old theta and new theta which follow proposal distribution
old_prop_adj = dnorm(old_theta, mu_prop, sd_prop, log = TRUE)
new_prop_adj = dnorm(new_theta, mu_prop, sd_prop, log = TRUE)
#calculate the probability based on the old theta and new theta which follow prior distribution
old_prior = dnorm(old_theta, mu_prior, sd_prior, log = TRUE)
new_prior = dnorm(new_theta, mu_prior, sd_prior, log = TRUE)
#Calculate the likelihood based on the old theta and new theta
old_lik = sum(dnorm(y_test, old_theta, sd_fixed, log = TRUE))
new_lik = sum(dnorm(y_test, new_theta, sd_fixed, log = TRUE))
# Calculate the posterior
old_post = old_prior + old_lik
new_post = new_prior + new_lik
# calculate log_ratio and ratio
log_ratio = (new_post - new_prop_adj) - (old_post - old_prop_adj)
ratio = exp(log_ratio)
# make a decision
if(ratio > 1){
chosen_theta[i] = new_theta
}else{
rand = runif(1, min = 0, max = 1)
if(ratio >= rand){
chosen_theta[i] = new_theta
}else{
chosen_theta[i] = old_theta
}
}
#assign the new value to the old_theta
old_theta = chosen_theta[i]
}
result = tail(chosen_theta,length(chosen_theta)/2)
return(result)
}
x <- theta()
x
n_iter = 10000
theta <- function(){
#-----------------------------------
#-----------------------------------
#The mu and sd for the real distribution
mu_true = 3
sd_fixed = 2
#The mu and sd for the prior distribution
mu_prior = 5
sd_prior = 10
#The mu and sd for the proposal distribution
mu_prop = 5
sd_prop = sd_prior * 1.1
#-----------------------------------
#-----------------------------------
#Generate 30 observations from real distributation
n_sample = 30
y_test = rnorm(n_sample, mu_true, sd_fixed)
#-----------------------------------
#-----------------------------------
chosen_theta = NULL
result = NULL
for(i in 1:n_iter){
# Initializing the old_theta
if(i == 1){
old_theta = rnorm(1, mu_prop, sd_prop)
}
# for each loop, it will generate a new theta
new_theta = rnorm(1, mu_prop, sd_prop)
#calculate the probability based on the old theta and new theta which follow proposal distribution
old_prop_adj = dnorm(old_theta, mu_prop, sd_prop, log = TRUE)
new_prop_adj = dnorm(new_theta, mu_prop, sd_prop, log = TRUE)
#calculate the probability based on the old theta and new theta which follow prior distribution
old_prior = dnorm(old_theta, mu_prior, sd_prior, log = TRUE)
new_prior = dnorm(new_theta, mu_prior, sd_prior, log = TRUE)
#Calculate the likelihood based on the old theta and new theta
old_lik = sum(dnorm(y_test, old_theta, sd_fixed, log = TRUE))
new_lik = sum(dnorm(y_test, new_theta, sd_fixed, log = TRUE))
# Calculate the posterior
old_post = old_prior + old_lik
new_post = new_prior + new_lik
# calculate log_ratio and ratio
log_ratio = (new_post - new_prop_adj) - (old_post - old_prop_adj)
ratio = exp(log_ratio)
# make a decision
if(ratio > 1){
chosen_theta[i] = new_theta
}else{
rand = runif(1, min = 0, max = 1)
if(ratio >= rand){
chosen_theta[i] = new_theta
}else{
chosen_theta[i] = old_theta
}
}
#assign the new value to the old_theta
old_theta = chosen_theta[i]
}
#remove the burn-in (n/2) from each chain
result = tail(chosen_theta,length(chosen_theta)/2)
return(result)
}
object <- matrix(0, nrow = 15, ncol = n.columns)
n_iter = 10000
theta <- function(){
#-----------------------------------
#-----------------------------------
#The mu and sd for the real distribution
mu_true = 3
sd_fixed = 2
#The mu and sd for the prior distribution
mu_prior = 5
sd_prior = 10
#The mu and sd for the proposal distribution
mu_prop = 5
sd_prop = sd_prior * 1.1
#-----------------------------------
#-----------------------------------
#Generate 30 observations from real distributation
n_sample = 30
y_test = rnorm(n_sample, mu_true, sd_fixed)
#-----------------------------------
#-----------------------------------
chosen_theta = NULL
result = NULL
for(i in 1:n_iter){
# Initializing the old_theta
if(i == 1){
old_theta = rnorm(1, mu_prop, sd_prop)
}
# for each loop, it will generate a new theta
new_theta = rnorm(1, mu_prop, sd_prop)
#calculate the probability based on the old theta and new theta which follow proposal distribution
old_prop_adj = dnorm(old_theta, mu_prop, sd_prop, log = TRUE)
new_prop_adj = dnorm(new_theta, mu_prop, sd_prop, log = TRUE)
#calculate the probability based on the old theta and new theta which follow prior distribution
old_prior = dnorm(old_theta, mu_prior, sd_prior, log = TRUE)
new_prior = dnorm(new_theta, mu_prior, sd_prior, log = TRUE)
#Calculate the likelihood based on the old theta and new theta
old_lik = sum(dnorm(y_test, old_theta, sd_fixed, log = TRUE))
new_lik = sum(dnorm(y_test, new_theta, sd_fixed, log = TRUE))
# Calculate the posterior
old_post = old_prior + old_lik
new_post = new_prior + new_lik
# calculate log_ratio and ratio
log_ratio = (new_post - new_prop_adj) - (old_post - old_prop_adj)
ratio = exp(log_ratio)
# make a decision
if(ratio > 1){
chosen_theta[i] = new_theta
}else{
rand = runif(1, min = 0, max = 1)
if(ratio >= rand){
chosen_theta[i] = new_theta
}else{
chosen_theta[i] = old_theta
}
}
#assign the new value to the old_theta
old_theta = chosen_theta[i]
}
#remove the burn-in (n/2) from each chain
result = tail(chosen_theta,length(chosen_theta)/2)
return(result)
}
object <- matrix(0, nrow = 15, ncol = (n_iter/2)
for(row in 1:nrow = 15){
n_iter = 10000
theta <- function(){
#-----------------------------------
#-----------------------------------
#The mu and sd for the real distribution
mu_true = 3
sd_fixed = 2
#The mu and sd for the prior distribution
mu_prior = 5
sd_prior = 10
#The mu and sd for the proposal distribution
mu_prop = 5
sd_prop = sd_prior * 1.1
#-----------------------------------
#-----------------------------------
#Generate 30 observations from real distributation
n_sample = 30
y_test = rnorm(n_sample, mu_true, sd_fixed)
#-----------------------------------
#-----------------------------------
chosen_theta = NULL
result = NULL
for(i in 1:n_iter){
# Initializing the old_theta
if(i == 1){
old_theta = rnorm(1, mu_prop, sd_prop)
}
# for each loop, it will generate a new theta
new_theta = rnorm(1, mu_prop, sd_prop)
#calculate the probability based on the old theta and new theta which follow proposal distribution
old_prop_adj = dnorm(old_theta, mu_prop, sd_prop, log = TRUE)
new_prop_adj = dnorm(new_theta, mu_prop, sd_prop, log = TRUE)
#calculate the probability based on the old theta and new theta which follow prior distribution
old_prior = dnorm(old_theta, mu_prior, sd_prior, log = TRUE)
new_prior = dnorm(new_theta, mu_prior, sd_prior, log = TRUE)
#Calculate the likelihood based on the old theta and new theta
old_lik = sum(dnorm(y_test, old_theta, sd_fixed, log = TRUE))
new_lik = sum(dnorm(y_test, new_theta, sd_fixed, log = TRUE))
# Calculate the posterior
old_post = old_prior + old_lik
new_post = new_prior + new_lik
# calculate log_ratio and ratio
log_ratio = (new_post - new_prop_adj) - (old_post - old_prop_adj)
ratio = exp(log_ratio)
# make a decision
if(ratio > 1){
chosen_theta[i] = new_theta
}else{
rand = runif(1, min = 0, max = 1)
if(ratio >= rand){
chosen_theta[i] = new_theta
}else{
chosen_theta[i] = old_theta
}
}
#assign the new value to the old_theta
old_theta = chosen_theta[i]
}
#remove the burn-in (n/2) from each chain
result = tail(chosen_theta,length(chosen_theta)/2)
return(result)
}
object <- matrix(0, nrow = 15, ncol = (n_iter/2))
for(row in 1:nrow = 15){
n_iter = 10000
theta <- function(){
#-----------------------------------
#-----------------------------------
#The mu and sd for the real distribution
mu_true = 3
sd_fixed = 2
#The mu and sd for the prior distribution
mu_prior = 5
sd_prior = 10
#The mu and sd for the proposal distribution
mu_prop = 5
sd_prop = sd_prior * 1.1
#-----------------------------------
#-----------------------------------
#Generate 30 observations from real distributation
n_sample = 30
y_test = rnorm(n_sample, mu_true, sd_fixed)
#-----------------------------------
#-----------------------------------
chosen_theta = NULL
result = NULL
for(i in 1:n_iter){
# Initializing the old_theta
if(i == 1){
old_theta = rnorm(1, mu_prop, sd_prop)
}
# for each loop, it will generate a new theta
new_theta = rnorm(1, mu_prop, sd_prop)
#calculate the probability based on the old theta and new theta which follow proposal distribution
old_prop_adj = dnorm(old_theta, mu_prop, sd_prop, log = TRUE)
new_prop_adj = dnorm(new_theta, mu_prop, sd_prop, log = TRUE)
#calculate the probability based on the old theta and new theta which follow prior distribution
old_prior = dnorm(old_theta, mu_prior, sd_prior, log = TRUE)
new_prior = dnorm(new_theta, mu_prior, sd_prior, log = TRUE)
#Calculate the likelihood based on the old theta and new theta
old_lik = sum(dnorm(y_test, old_theta, sd_fixed, log = TRUE))
new_lik = sum(dnorm(y_test, new_theta, sd_fixed, log = TRUE))
# Calculate the posterior
old_post = old_prior + old_lik
new_post = new_prior + new_lik
# calculate log_ratio and ratio
log_ratio = (new_post - new_prop_adj) - (old_post - old_prop_adj)
ratio = exp(log_ratio)
# make a decision
if(ratio > 1){
chosen_theta[i] = new_theta
}else{
rand = runif(1, min = 0, max = 1)
if(ratio >= rand){
chosen_theta[i] = new_theta
}else{
chosen_theta[i] = old_theta
}
}
#assign the new value to the old_theta
old_theta = chosen_theta[i]
}
#remove the burn-in (n/2) from each chain
result = tail(chosen_theta,length(chosen_theta)/2)
return(result)
}
object <- matrix(0, nrow = 15, ncol = (n_iter/2))
for(row in 1:nrow){
result <- theta()
mat[row, ] <- result
}
n_iter = 10000
theta <- function(){
#-----------------------------------
#-----------------------------------
#The mu and sd for the real distribution
mu_true = 3
sd_fixed = 2
#The mu and sd for the prior distribution
mu_prior = 5
sd_prior = 10
#The mu and sd for the proposal distribution
mu_prop = 5
sd_prop = sd_prior * 1.1
#-----------------------------------
#-----------------------------------
#Generate 30 observations from real distributation
n_sample = 30
y_test = rnorm(n_sample, mu_true, sd_fixed)
#-----------------------------------
#-----------------------------------
chosen_theta = NULL
result = NULL
for(i in 1:n_iter){
# Initializing the old_theta
if(i == 1){
old_theta = rnorm(1, mu_prop, sd_prop)
}
# for each loop, it will generate a new theta
new_theta = rnorm(1, mu_prop, sd_prop)
#calculate the probability based on the old theta and new theta which follow proposal distribution
old_prop_adj = dnorm(old_theta, mu_prop, sd_prop, log = TRUE)
new_prop_adj = dnorm(new_theta, mu_prop, sd_prop, log = TRUE)
#calculate the probability based on the old theta and new theta which follow prior distribution
old_prior = dnorm(old_theta, mu_prior, sd_prior, log = TRUE)
new_prior = dnorm(new_theta, mu_prior, sd_prior, log = TRUE)
#Calculate the likelihood based on the old theta and new theta
old_lik = sum(dnorm(y_test, old_theta, sd_fixed, log = TRUE))
new_lik = sum(dnorm(y_test, new_theta, sd_fixed, log = TRUE))
# Calculate the posterior
old_post = old_prior + old_lik
new_post = new_prior + new_lik
# calculate log_ratio and ratio
log_ratio = (new_post - new_prop_adj) - (old_post - old_prop_adj)
ratio = exp(log_ratio)
# make a decision
if(ratio > 1){
chosen_theta[i] = new_theta
}else{
rand = runif(1, min = 0, max = 1)
if(ratio >= rand){
chosen_theta[i] = new_theta
}else{
chosen_theta[i] = old_theta
}
}
#assign the new value to the old_theta
old_theta = chosen_theta[i]
}
#remove the burn-in (n/2) from each chain
result = tail(chosen_theta,length(chosen_theta)/2)
return(result)
}
object <- matrix(0, 15, ncol = (n_iter/2))
for(row in 1:15){
result <- theta()
mat[row, ] <- result
}
n_iter = 10000
theta <- function(){
#-----------------------------------
#-----------------------------------
#The mu and sd for the real distribution
mu_true = 3
sd_fixed = 2
#The mu and sd for the prior distribution
mu_prior = 5
sd_prior = 10
#The mu and sd for the proposal distribution
mu_prop = 5
sd_prop = sd_prior * 1.1
#-----------------------------------
#-----------------------------------
#Generate 30 observations from real distributation
n_sample = 30
y_test = rnorm(n_sample, mu_true, sd_fixed)
#-----------------------------------
#-----------------------------------
chosen_theta = NULL
result = NULL
for(i in 1:n_iter){
# Initializing the old_theta
if(i == 1){
old_theta = rnorm(1, mu_prop, sd_prop)
}
# for each loop, it will generate a new theta
new_theta = rnorm(1, mu_prop, sd_prop)
#calculate the probability based on the old theta and new theta which follow proposal distribution
old_prop_adj = dnorm(old_theta, mu_prop, sd_prop, log = TRUE)
new_prop_adj = dnorm(new_theta, mu_prop, sd_prop, log = TRUE)
#calculate the probability based on the old theta and new theta which follow prior distribution
old_prior = dnorm(old_theta, mu_prior, sd_prior, log = TRUE)
new_prior = dnorm(new_theta, mu_prior, sd_prior, log = TRUE)
#Calculate the likelihood based on the old theta and new theta
old_lik = sum(dnorm(y_test, old_theta, sd_fixed, log = TRUE))
new_lik = sum(dnorm(y_test, new_theta, sd_fixed, log = TRUE))
# Calculate the posterior
old_post = old_prior + old_lik
new_post = new_prior + new_lik
# calculate log_ratio and ratio
log_ratio = (new_post - new_prop_adj) - (old_post - old_prop_adj)
ratio = exp(log_ratio)
# make a decision
if(ratio > 1){
chosen_theta[i] = new_theta
}else{
rand = runif(1, min = 0, max = 1)
if(ratio >= rand){
chosen_theta[i] = new_theta
}else{
chosen_theta[i] = old_theta
}
}
#assign the new value to the old_theta
old_theta = chosen_theta[i]
}
#remove the burn-in (n/2) from each chain
result = tail(chosen_theta,length(chosen_theta)/2)
return(result)
}
object <- matrix(0, 15, ncol = (n_iter/2))
for(row in 1:15){
result <- theta()
object[row, ] <- result
}
n_iter = 10000
theta <- function(){
#-----------------------------------
#-----------------------------------
#The mu and sd for the real distribution
mu_true = 3
sd_fixed = 2
#The mu and sd for the prior distribution
mu_prior = 5
sd_prior = 10
#The mu and sd for the proposal distribution
mu_prop = 5
sd_prop = sd_prior * 1.1
#-----------------------------------
#-----------------------------------
#Generate 30 observations from real distributation
n_sample = 30
y_test = rnorm(n_sample, mu_true, sd_fixed)
#-----------------------------------
#-----------------------------------
chosen_theta = NULL
result = NULL
for(i in 1:n_iter){
# Initializing the old_theta
if(i == 1){
old_theta = rnorm(1, mu_prop, sd_prop)
}
# for each loop, it will generate a new theta
new_theta = rnorm(1, mu_prop, sd_prop)
#calculate the probability based on the old theta and new theta which follow proposal distribution
old_prop_adj = dnorm(old_theta, mu_prop, sd_prop, log = TRUE)
new_prop_adj = dnorm(new_theta, mu_prop, sd_prop, log = TRUE)
#calculate the probability based on the old theta and new theta which follow prior distribution
old_prior = dnorm(old_theta, mu_prior, sd_prior, log = TRUE)
new_prior = dnorm(new_theta, mu_prior, sd_prior, log = TRUE)
#Calculate the likelihood based on the old theta and new theta
old_lik = sum(dnorm(y_test, old_theta, sd_fixed, log = TRUE))
new_lik = sum(dnorm(y_test, new_theta, sd_fixed, log = TRUE))
# Calculate the posterior
old_post = old_prior + old_lik
new_post = new_prior + new_lik
# calculate log_ratio and ratio
log_ratio = (new_post - new_prop_adj) - (old_post - old_prop_adj)
ratio = exp(log_ratio)
# make a decision
if(ratio > 1){
chosen_theta[i] = new_theta
}else{
rand = runif(1, min = 0, max = 1)
if(ratio >= rand){
chosen_theta[i] = new_theta
}else{
chosen_theta[i] = old_theta
}
}
#assign the new value to the old_theta
old_theta = chosen_theta[i]
}
#remove the burn-in (n/2) from each chain
result = tail(chosen_theta,length(chosen_theta)/2)
return(result)
}
object <- matrix(0, 15, ncol = (n_iter/2))
for(row in 1:15){
result <- theta()
object[row, ] <- result
}
str(object)
