# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 100
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq+1)
#y_pmf = rbinom(n_seq, 1, 0.5)
y_pmf
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 100
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq+1)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
#Uniform Distribution
pdf_func = function(x,lower,upper){
if((x>= lower) & (x<=upper)){
result = 1/(upper-lower);
}
else{
result = 0;
}
return(result)
}
pdf_func(x=0,lower=-10,upper=10)
#Uniform Distribution
dunif(0, min = -10, max = 10)
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
pdf_uniform = dunif(x,-10,10)
plot(pdf_uniform ~ x,type = "l")
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
cdf_uniform = punif(x,-10,10)
plot(cdf_uniform ~ x,type = "l")
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 100
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq+1)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Plot the random draws:
hist(sim_out$rand_bernoullia[, 1:n_draws], main = "", xlab = "y")
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 100
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq+1)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 100
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq+1)
y_pmf
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 101
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq)
y_pmf
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 101
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Plot the random draws:
hist(sim_out$rand_binomial[, 1:n_draws], main = "", xlab = "y")
mean(sim_out$rand_binomial[, 1:n_draws])
var(sim_out$rand_binomial[, 1:n_draws])
# Plot the PMF
## First get back to usual scale:
lik_pmf = exp(sim_out$log_lik[, 1:n_seq])
## Now plot:
plot(lik_pmf ~ y_pmf, type = "l",)
# Plot the PMF
lik_pmf_R = dbinom(y_pmf,size=1000, prob = 0.25)
plot(lik_pdf_R ~ y_pdf, type = "l")
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 101
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
#Uniform Distribution
pdf_func = function(x,lower,upper){
if((x>= lower) & (x<=upper)){
result = 1/(upper-lower);
}
else{
result = 0;
}
return(result)
}
pdf_func(x=0,lower=-10,upper=10)
#Uniform Distribution
dunif(0, min = -10, max = 10)
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
pdf_uniform = dunif(x,-10,10)
plot(pdf_uniform ~ x,type = "l")
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
cdf_uniform = punif(x,-10,10)
plot(cdf_uniform ~ x,type = "l")
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 101
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Plot the random draws:
hist(sim_out$rand_binomial[, 1:n_draws], main = "", xlab = "y")
mean(sim_out$rand_binomial[, 1:n_draws])
var(sim_out$rand_binomial[, 1:n_draws])
# Plot the PMF
## First get back to usual scale:
lik_pmf = exp(sim_out$log_lik[, 1:n_seq])
## Now plot:
plot(lik_pmf ~ y_pmf, type = "l",)
# Plot the PMF
lik_pmf_R = dbinom(y_pmf,size=1000, prob = 0.25)
plot(lik_pdf_R ~ y_pdf, type = "l")
# Plot the PMF
## First get back to usual scale:
lik_pmf = exp(sim_out$log_lik[, 1:n_seq])
## Now plot:
plot(lik_pmf ~ y_pmf, type = "l",)
#Uniform Distribution
pdf_func = function(x,lower,upper){
if((x>= lower) & (x<=upper)){
result = 1/(upper-lower);
}
else{
result = 0;
}
return(result)
}
pdf_func(x=0,lower=-10,upper=10)
#Uniform Distribution
dunif(0, min = -10, max = 10)
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
pdf_uniform = dunif(x,-10,10)
plot(pdf_uniform ~ x,type = "l")
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
cdf_uniform = punif(x,-10,10)
plot(cdf_uniform ~ x,type = "l")
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 101
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Plot the random draws:
hist(sim_out$rand_binomial[, 1:n_draws], main = "", xlab = "y")
mean(sim_out$rand_binomial[, 1:n_draws])
var(sim_out$rand_binomial[, 1:n_draws])
# Plot the PMF
## First get back to usual scale:
lik_pmf = exp(sim_out$log_lik[, 1:n_seq])
## Now plot:
plot(lik_pmf ~ y_pmf, type = "l",)
# Plot the PMF
lik_pmf_R = dbinom(y_pmf,size=1000, prob = 0.25)
plot(lik_pdf_R ~ y_pdf, type = "l")
#Uniform Distribution
pdf_func = function(x,lower,upper){
if((x>= lower) & (x<=upper)){
result = 1/(upper-lower);
}
else{
result = 0;
}
return(result)
}
pdf_func(x=0,lower=-10,upper=10)
#Uniform Distribution
dunif(0, min = -10, max = 10)
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
pdf_uniform = dunif(x,-10,10)
plot(pdf_uniform ~ x,type = "l")
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
cdf_uniform = punif(x,-10,10)
plot(cdf_uniform ~ x,type = "l")
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 101
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Plot the random draws:
hist(sim_out$rand_binomial[, 1:n_draws], main = "", xlab = "y")
mean(sim_out$rand_binomial[, 1:n_draws])
var(sim_out$rand_binomial[, 1:n_draws])
# Plot the PMF
## First get back to usual scale:
lik_pmf = exp(sim_out$log_lik[, 1:n_seq])
## Now plot:
plot(lik_pmf ~ y_pmf, type = "l",)
# Plot the PMF
lik_pmf_R = dbinom(y_pmf,size=1000, prob = 0.25)
plot(lik_pdf_R ~ y_pdf, type = "l")
# Plot the PMF
## First get back to usual scale:
lik_pmf = exp(sim_out$log_lik[, 1:n_seq])
## Now plot:
plot(lik_pmf ~ y_pmf, type = "l",)
hist(lik_pmf)
sim_out$log_lik[, 20:25]
head(y_pmf)
#Uniform Distribution
pdf_func = function(x,lower,upper){
if((x>= lower) & (x<=upper)){
result = 1/(upper-lower);
}
else{
result = 0;
}
return(result)
}
pdf_func(x=0,lower=-10,upper=10)
#Uniform Distribution
dunif(0, min = -10, max = 10)
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
pdf_uniform = dunif(x,-10,10)
plot(pdf_uniform ~ x,type = "l")
#Uniform Distribution
x = seq(-20,20,length.out = 10000)
cdf_uniform = punif(x,-10,10)
plot(cdf_uniform ~ x,type = "l")
# Define data inputs
## Number of random draws:
n_draws = 1000
## Number of points used for PMF:
n_seq = 101
## Sequence of observed y, for PMF:
y_pmf = seq(0, 100, length.out = n_seq)
# Store the required data in a list
sim_data = list(n_draws = n_draws,
n_seq = n_seq,
y_pmf = y_pmf)
#------------------
#------------------
# Run the simulation:
sim_fit =
stan(file="pmf_sim.stan",
data=sim_data,
iter=1,
chains=1,
algorithm="Fixed_param"
)
# The function extract() will create a list of output
# Note that "lp__" is irrelevant here, but will become
# very important later in the course.
sim_out = extract(sim_fit)
str(sim_out)
# Plot the random draws:
hist(sim_out$rand_binomial[, 1:n_draws], main = "", xlab = "y")
mean(sim_out$rand_binomial[, 1:n_draws])
var(sim_out$rand_binomial[, 1:n_draws])
# Plot the PMF
## First get back to usual scale:
lik_pmf = exp(sim_out$log_lik[, 1:n_seq])
## Now plot:
plot(lik_pmf ~ y_pmf, type = "l",)
# Plot the PMF
lik_pmf_R = dbinom(y_pmf,size=1000, prob = 0.25)
plot(lik_pdf_R ~ y_pdf, type = "l")
# Plot the PMF
## First get back to usual scale:
lik_pmf = exp(sim_out$log_lik[, 1:n_seq])
## Now plot:
plot(lik_pmf ~ y_pmf, type = "p",)
# Plot the PMF
lik_pmf_R = dbinom(y_pmf,size=100, prob = 0.25)
plot(lik_pdf_R ~ y_pdf, type = "l")
# Plot the PMF
lik_pmf_R = dbinom(y_pmf,size=100, prob = 0.25)
plot(lik_pmf_R ~ y_pmf, type = "p")
